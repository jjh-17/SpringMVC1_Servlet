비즈니스 로직과 뷰 렌더링 수정하는 일은 다른 시간대에 발생할 가능성이 높으며, 서로에게 영향을 주지 않는다.
    ==> 서블렛, JSP 처럼 하나의 코드로 관리하는 것은 유지보수에 좋지 않음

[Movel View Controller - MVC 패턴]
컨트롤러 역할, View 랜더링 역할을 명확히 구분
*컨트롤러
    -HTTP 요청을 받아 파라미터 검증, 비즈니스 로직 실행
    -뷰에 전달할 결과 데이터를 조회해서 모델이 담는다
    -보통 Service 계층에서 비즈니스 로직 처리, 컨트롤러는 비즈니스 로직 실행
*모델
    -뷰에 출력할 데이터를 담아둠
    -뷰는 비즈니스 로직/데이터 접근을 몰라도 되고 화면 렌더링에 집중 가능
*뷰
    -모델 내 데이터를 사용하여 화면 렌더링 수행(HTML 생성)


#단점
    -forward 중복
        ==> View로 이동하는 코드가 항상 중복 호출되어야 함
    -ViewPath 중복
        ==> 폴더 변경, jsp 대신 다른 형식으로 변경 시 전체 코드 수정 필요
    -request, response 사용하지 않을 때도 있음
    -공통 처리가 어려움
        ==> 기능이 복잡해질 수록 컨트롤러에서 공통으로 처리해야 하는 부분이 증가
            ==> 공통 기능을 메서드로 변환해도 해당 메서드를 중복해서 호출하는 경우가 생김